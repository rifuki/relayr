#!/bin/sh
# ==============================================================================
# Docker Control Script for Relayr Project
# ==============================================================================
# This script simplifies running the application in different environments.
#
# Usage:
#   ./docker.sh dev                         - Start development environment (hot-reload)
#   ./docker.sh build-local                 - Simulate a production build locally (uses docker-compose.yaml)
#   ./docker.sh build-local-backend         - Simulate a production build for the backend ONLY
#   ./docker.sh prod [up|down|pull]         - Manage the 'All-in-One' production deployment
#   ./docker.sh prod-backend [up|down|pull] - Manage the 'Backend-Only' production deployment
#   ./docker.sh down                        - Stop all potentially running environments
# ==============================================================================

# --- Configuration ---
UI_PROD_ENV_FILE="./relayr-ui/.env.production"

# --- Helper Functions ---
# This function is used for local build commands.
run_build_local_compose() {
  if [ ! -f "$UI_PROD_ENV_FILE" ]; then
    echo "WARNING: Production environment file '$UI_PROD_ENV_FILE' not found."
    echo "Please provide the required variables:"
    read -p "Enter NEXT_PUBLIC_API_URL: " NEXT_PUBLIC_API_URL
    echo "Create new .env.production file with the provided variables..."
    cat > "$UI_PROD_ENV_FILE" << EOL
# This file was auto-generated by docker.sh
NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
EOL
    echo "Production environment file created at '$UI_PROD_ENV_FILE'."
  fi
  echo "Using production environment file: $UI_PROD_ENV_FILE"
  docker compose --env-file "$UI_PROD_ENV_FILE" "$@"
}

# --- Main Logic ---
ENVIRONMENT="$1"
ACTION=${2:-up}

if [ -z "$ENVIRONMENT" ]; then
  echo "Usage: $0 {dev|build-local|build-local-backend|prod|prod-backend|down} [up|down|pull]"
  exit 1
fi

case $ENVIRONMENT in
  dev)
    echo "--- Starting Development Environment (with hot-reload) ---"
    docker compose -f docker-compose.dev.yaml up --build
    ;;

  build-local)
    echo "--- Building Local Production Environment (using docker-compose.yaml) ---"
    # Menggunakan file docker-compose.yaml yang sekarang menjadi file untuk build
    run_build_local_compose -f docker-compose.yaml up --build --detach
    ;;

  build-local-backend)
    echo "--- Building ONLY backend service locally (production mode) ---"
    # Menggunakan docker-compose.yaml tapi hanya menargetkan service 'relayr-api'
    run_build_local_compose -f docker-compose.yaml up --build relayr-api --detach
    ;;

  prod)
    echo "--- Managing 'All-in-One' REAL Production Environment ---"
    if [ "$ACTION" = "up" ]; then
      echo "1. Pulling latest images..."
      docker compose -f docker-compose.prod.yaml pull
      echo "2. Starting services..."
      docker compose -f docker-compose.prod.yaml up --detach
    elif [ "$ACTION" = "down" ]; then
      echo "Stopping production services..."
      docker compose -f docker-compose.prod.yaml down
    elif [ "$ACTION" = "pull" ]; then
      echo "Pulling latest images from registry..."
      docker compose -f docker-compose.prod.yaml pull
    else
      echo "Invalid action for 'prod'. Use 'up', 'down' or 'pull'."
      exit 1
    fi
    ;;

  prod-backend)
    echo "--- Managing 'Backend-Only' REAL Production Environment ---"
    if [ "$ACTION" = "up" ]; then
      echo "1. Pulling latest backend image..."
      docker compose -f docker-compose.prod-backend.yaml pull
      echo "2. Starting backend services..."
      docker compose -f docker-compose.prod-backend.yaml up --detach
    elif [ "$ACTION" = "down" ]; then
      echo "Stopping backend-only services..."
      docker compose -f docker-compose.prod-backend.yaml down
    elif [ "$ACTION" = "pull" ]; then
      echo "Pulling latest backend image from registry..."
      docker compose -f docker-compose.prod-backend.yaml pull
    else
      echo "Invalid action for 'prod-backend'. Use 'up', 'down' or 'pull'."
      exit 1
    fi
    ;;

  down)
    echo "--- CLEAN SWEEP: Stopping all environments ---"
    echo "Stopping development environment..."
    docker compose -f docker-compose.dev.yaml down
    echo "Stopping local build environment..."
    docker compose --env-file "$UI_PROD_ENV_FILE" -f docker-compose.yaml down
    echo "Stopping all-in-one production environment..."
    docker compose -f docker-compose.prod.yaml down
    echo "Stopping backend-only production environment..."
    docker compose -f docker-compose.prod-backend.yaml down
    echo "Cleanup complete."
    ;;

  *)
    echo "Error: Unknown environment '$ENVIRONMENT'."
    echo "Usage: $0 {dev|build-local|build-local-backend|prod|prod-backend|down} [up|down|pull]"
    exit 1
    ;;
esac

echo "--- Operation Completed ---"
